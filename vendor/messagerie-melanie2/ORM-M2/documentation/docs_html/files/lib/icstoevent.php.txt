<?php
/**
 * Ce fichier est développé pour la gestion de la librairie Mélanie2
 * Cette Librairie permet d'accèder aux données sans avoir à implémenter de couche SQL
 * Des objets génériques vont permettre d'accèder et de mettre à jour les données
 *
 * ORM M2 Copyright © 2017  PNE Annuaire et Messagerie/MEDDE
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
namespace LibMelanie\Lib;

use LibMelanie\Api\Melanie2\Exception;

use LibMelanie\Api\Melanie2\Event;

require_once 'vendor/autoload.php';
use Sabre\VObject;

/**
 * Class de génération de l'évènement en fonction de l'ICS
 * Méthodes Statiques
 *
 * @author PNE Messagerie/Apitech
 * @package Librairie Mélanie2
 * @subpackage Lib Mélanie2
 *
 */
class ICSToEvent {
	const PRODID = '-//LibMelanie2 PHP/PNE Messagerie/MEDDE';
	const VERSION = '2.0';
	/**
	 *  Constructeur privé pour ne pas instancier la classe
	 */
	private function __construct() { }

	/**
	 * Génére un évènement mélanie2 en fonction de l'ics passé en paramètre
	 * L'évènement doit être de type Event de la librairie LibM2
	 * Gère également les exceptions dans l'évènement en fonction des RECURRENCE-ID
	 * @param string $ics
	 * @param Event $event
	 * @return void
	 */
	public static function Convert(String $ics, Event $event) {
		$vcalendar = VObject\Reader::read($ics);
		$exceptions = array();
		foreach($vcalendar->VEVENT as $vevent) {
			$recurrence_id = $vcalendar->VEVENT->select(ICS::RECURRENCE_ID);
			if (isset($recurrence_id)) {
				$object = new Exception($event);
				$object->recurrenceId = $recurrence_id;
			} else {
				$object = $event;
			}
			// UID
			if (!isset($vevent->UID)) continue;
			else $object->uid = $vevent->UID;
			// SUMMARY
			if (isset($vevent->SUMMARY)) $object->title = $vevent->SUMMARY;
			else $object->title = '';
			// DESCRIPTION
			if (isset($vevent->DESCRIPTION)) $object->description = $vevent->DESCRIPTION;
			else $object->description = '';
			// LOCATION
			if (isset($vevent->LOCATION)) $object->location = $vevent->LOCATION;
			else $object->location = '';
			// DTSTAMP
			if (isset($vevent->DTSTAMP)) $object->modified = strtotime($vevent->DTSTAMP);
			else $object->modified = time();
			// CLASS
			if (isset($vevent->CLASS)) {
				switch ($vevent->CLASS) {
					case ICS::CLASS_PUBLIC:
					default:
						$object->class = Event::CLASS_PUBLIC;
						break;
					case ICS::CLASS_CONFIDENTIAL:
						$object->class = Event::CLASS_CONFIDENTIAL;
						break;
					case ICS::CLASS_PRIVATE:
						$object->class = Event::CLASS_PRIVATE;
						break;
				}

			} else $object->class = Event::CLASS_PUBLIC;
			// STATUS
			if (isset($vevent->STATUS)) {
				switch ($vevent->STATUS) {
					default:
					case ICS::STATUS_CONFIRMED:
					case ICS::STATUS_NONE:
						$object->status = Event::STATUS_CONFIRMED;
						break;
					case ICS::STATUS_CANCELLED:
						$object->status = Event::STATUS_CANCELLED;
						break;
					case ICS::STATUS_TENTATIVE:
						$object->status = Event::STATUS_TENTATIVE;
						break;
				}
			} else $object->status = Event::STATUS_CONFIRMED;
		}
	}

}
