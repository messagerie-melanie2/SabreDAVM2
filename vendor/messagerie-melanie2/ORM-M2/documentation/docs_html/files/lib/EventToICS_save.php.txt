<?php
/**
 * ORM M2 Copyright © 2017  PNE Annuaire et Messagerie/MEDDE
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @ignore
 */
namespace LibMelanie\Lib;

// Constantes pour les jour de la semaine
define ("RECUDAY_SUNDAY", 1);
define ("RECUDAY_MONDAY", 2);
define ("RECUDAY_TUESDAY", 4);
define ("RECUDAY_WEDNESDAY", 8);
define ("RECUDAY_THURSDAY", 16);
define ("RECUDAY_FRIDAY", 32);
define ("RECUDAY_SATURDAY", 64);

// Constantes pour les types de recurrence
define ("RECUTYPE_NORECUR", 0);
define ("RECUTYPE_DAILY", 1);
define ("RECUTYPE_WEEKLY", 2);
define ("RECUTYPE_MONTHLY", 3);
define ("RECUTYPE_MONTHLY_BYDAY", 4);
define ("RECUTYPE_YEARLY", 5);
define ("RECUTYPE_YEARLY_BYDAY", 6);

// Constantes pour les réponses des participants
define ("ATTEND_RESP_NEED_ACTION",  1);
define ("ATTEND_RESP_ACCEPTED", 2);
define ("ATTEND_RESP_DECLINED", 3);
define ("ATTEND_RESP_IN_PROCESS", 1);
define ("ATTEND_RESP_TENTATIVE", 4);

// Constantes pour les roles des participants
define ("ATTEND_ROLE_REQ_PARTICIPANT", 1);
define ("ATTEND_ROLE_OPT_PARTICIPANT", 2);
define ("ATTEND_ROLE_NON_PARTICIPANT", 3);

// Constantes pour les status des événements
define ("STATUS_NONE", 4);
define ("STATUS_TENTATIVE", 1);
define ("STATUS_CONFIRMED", 2);
define ("STATUS_CANCELLED", 3);

// Constantes pour les classes des événements (publique ou privé)
define ("CLASS_PUBLIC", 0);
define ("CLASS_PRIVATE", 1);


/**
 * Classe de converstion d'un objet event en ICS
 * @author thomas
 *
 */
class EventToICSSAVE {
	private $event = null;
	private $calendar = null;
	private $vevent = null;

	/**
	 * Constructeur, prend l'évènement en paramètre
	 */
	public function __construct($event, $calendar) {
		$this->event = $event;
		$this->calendar = $calendar;

		// vevent a integrer dans le vcalendar
		$this->vevent = new vevent();
	}

	/**
	 * Converti l'évènement en ICS
	 * @return string
	 */
	public function convertToICS() {
		// Définition de l'UID de l'événement
      	$this->vevent->setProperty( 'uid', $this->event->event_uid );

      	$this->convertDate();
      	$this->status();
      	$this->recurrence();
      	$this->attendees();

      	// Ajout des attributs
      	if (isset($this->event->summary) && $this->event->summary != "")
      		$this->vevent->setProperty( 'summary', $this->event->summary );

      	// Gestion de la description de l'événement
      	$description = "";
      	if (isset($this->event->event_description) && $this->event->event_description != "")
      		$description = $this->cleanUTF8String($this->event->event_description);

      	if ($description != "")
      		$this->vevent->setProperty( 'description', $description);

      	if (isset($this->event->event_location) && $this->event->event_location != "")
      		$this->vevent->setProperty( 'location', $this->event->event_location );

      	if (isset($this->event->event_category) && $this->event->event_category != "")
      		$this->vevent->setProperty( 'categories', $this->event->event_category);

      	// Gestion des alarmes
      	if (intval($this->event->event_alarm) != 0)	{
      		$valarm = new valarm();
      		$valarm->setProperty( "action", "DISPLAY" );
      		$valarm->setProperty( "trigger",  array('min'=>$this->event->event_alarm) );
      		$this->vevent->setComponent ( $valarm );
      	}

      	// Gestion de la class (privee ou publique)
      	if (intval($row['event_private']) == CLASS_PRIVATE)
      		$vevent->setProperty( 'class', 'PRIVATE' );
      	else
      		$vevent->setProperty( 'class', 'PUBLIC' );

      	// vcalendar pour la generation d'un ICS
      	$v = new vcalendar();

      	// Ajoute le vevent au vcalendar
      	$v->setComponent ( $vevent );

      	// retourne l'ICS
		return $v->createCalendar();
	}

	/**
	 * Gestion des dates
	 */
	private function convertDate() {
		// DateTime pour comparer les dates
		$dateTimeStart = new DateTime($this->event->event_start);
		$dateTimeEnd = new DateTime($this->event->event_end);

		// Test si c'est un evenement sur une journee entiere
		if ($dateTimeStart->format('H:i:s') == '00:00:00'
				&& $dateTimeEnd->format('H:i:s') == '00:00:00') {
			$start = array( 'timestamp' => strtotime(substr($this->event->event_start, 0, 10)));
			$end = array( 'timestamp' => strtotime(substr($this->event->event_end, 0, 10)));
			$this->vevent->setProperty( 'dtstart', $start, array('VALUE' => 'DATE') );
			$this->vevent->setProperty( 'dtend', $end, array('VALUE' => 'DATE') );
		} else 	{
			$start = array( 'timestamp' => strtotime($this->event->event_start), 'tz'=>$this->calendar->timezone);
			$end = array( 'timestamp' => strtotime($this->event->event_end), 'tz'=>$this->calendar->timezone);

			$this->vevent->setProperty( 'dtstart', $start );
			$this->vevent->setProperty( 'dtend', $end );
		}

		// Calcul du DTSTAMP
		$this->vevent->setProperty( 'dtstamp', gmdate("M d Y H:i:s", $this->event->event_modified));
	}

	/**
	 * Gestion du status
	 */
	private function status() {
		// Gestion du statut
		switch (intval($this->event->event_status))
		{
			case STATUS_NONE:
				break;
			case STATUS_TENTATIVE:
				$this->vevent->setProperty( 'status', 'TENTATIVE');
				break;
			case STATUS_CONFIRMED:
				$this->vevent->setProperty( 'status', 'CONFIRMED');
				break;
			case STATUS_CANCELLED:
				$this->vevent->setProperty( 'status', 'CANCELLED');
				break;
			default:
				break;
		}
	}

	/**
	 * Gestion de la récurrence
	 */
	private function recurrence() {
		// Tableau permettant de recuperer toutes les valeurs de la recurrence
		// On utilisera ensuite ces valeurs pour les integrer a l'ICS
		$recurrence = array();

		// Si une recurrence est bien definie dans l'evenement
		if (intval($this->event->event_recurtype) > RECUTYPE_NORECUR) {

    		// Gestion du nombre d'occurences
			if (isset($this->event->event_recurcount) && intval($this->event->event_recurcount) > 0) {
				$recurrence['COUNT'] = $this->event->event_recurcount;
    		}
			// Gestion d'une date de fin
			elseif (isset($this->event->event_recurenddate)
				&& substr($this->event->event_recurenddate, 0, 19) != '9999-12-31 00:00:00') {
				$recurrence['UNTIL'] = array('timestamp' => strtotime(str_replace('00:00:00', '23:59:00', substr($this->event->event_recurenddate, 0, 19))));
			}
			// Si pas de date de fin et pas de nombre d'occurrences, ne fait rien l'evenement sera illimite
			// Recupere l'interval de recurrence
			$recurrence['INTERVAL'] = $this->event->event_recurinterval;

    		// Test les jours sur lesquels se fait la recurrence
    		if (isset($this->event->event_recurdays) && intval($this->event->event_recurdays) > 0)
		    {
		    	// Creer un tableau qui va stocker les jours ou l'evenement intervient
		    	$days_list = array();

		    	// Le recurdays est un binaire permettant de lister les jours
		   		$recurdays = intval($this->event->event_recurdays);
				if (($recurdays - RECUDAY_SATURDAY) >= 0)
      			{
        			$recurdays = $recurdays - RECUDAY_SATURDAY;
		        	$days_list[] = array( 'DAY' => 'SA' );
				}
				if (($recurdays - RECUDAY_FRIDAY) >= 0)
				{
					$recurdays = $recurdays - RECUDAY_FRIDAY;
					$days_list[] = array( 'DAY' => 'FR' );
				}
				if (($recurdays - RECUDAY_THURSDAY) >= 0)
				{
					$recurdays = $recurdays - RECUDAY_THURSDAY;
					$days_list[] = array( 'DAY' => 'TH' );
				}
				if (($recurdays - RECUDAY_WEDNESDAY) >= 0)
				{
					$recurdays = $recurdays - RECUDAY_WEDNESDAY;
					$days_list[] = array( 'DAY' => 'WE' );
				}
				if (($recurdays - RECUDAY_TUESDAY) >= 0)
				{
					$recurdays = $recurdays - RECUDAY_TUESDAY;
					$days_list[] = array( 'DAY' => 'TU' );
				}
				if (($recurdays - RECUDAY_MONDAY) >= 0)
				{
					$recurdays = $recurdays - RECUDAY_MONDAY;
					$days_list[] = array( 'DAY' => 'MO' );
				}
				if (($recurdays - RECUDAY_SUNDAY) >= 0)
				{
					$recurdays = $recurdays - RECUDAY_SUNDAY;
					$days_list[] = array( 'DAY' => 'SU' );
				}

			// Récupère la liste des jours dans le tableau
			$recurrence['BYday'] = $days_list;
			}

			// Test le type de récurrence
			switch (intval($this->event->event_recurtype))
			{
				// Type simple DAILY
				case RECUTYPE_DAILY:
					$recurrence['FREQ'] = 'DAILY';
					break;

					// Type simple WEEKLY
				case RECUTYPE_WEEKLY:
					$recurrence['FREQ'] = 'WEEKLY';
					break;

					// Type simple MONTHLY
				case RECUTYPE_MONTHLY:
					$recurrence['FREQ'] = 'MONTHLY';
					break;

					// Type MONTHLY BYDAY, cad que l'event se repete certains jours dans le mois
				case RECUTYPE_MONTHLY_BYDAY:
					// Recurrence tous les mois sur certain jour. Il faut donc mettre des jours
					$recurrence['FREQ'] = 'MONTHLY';

					// Recupere le numero du jour de la semaine ou l'evenement demarre
					$daynum = ceil(intval( date( 'd', strtotime( $this->event->event_start ) ) ) / 7);
					if ($daynum == 4)
						$daynum = -1;

					// Recupere les lettres correspondant au jour de l'event en majuscule
					$day = strtoupper( substr( date( 'D', strtotime( $this->event->event_start ) ), 0, 2 ) );

					// Le jour contient le numero et les lettres
					$byday = $daynum . $day;

					// Ajoute le jour au tableau
					$recurrence['BYDAY'] = array( $daynum, 'DAY' => $day );
					break;

				// Type simple MONTHLY
				case RECUTYPE_YEARLY:
					$recurrence['FREQ'] = 'YEARLY';
					break;

				// Type YEARLY BYDAY, cad que l'evenement se repete certains jours et certains mois dans l'annee
				case RECUTYPE_YEARLY_BYDAY:
				default:
					// Recurrence par annee sur certain jour, Il faut trouver ces jours
					$recurrence['FREQ'] = 'YEARLY';

					// Recupere le numero du jour de la semaine ou l'evenement demarre
					$daynum = ceil(intval( date( 'd', strtotime( $this->event->event_start ) ) ) / 7);
					if ($daynum == 4)
						$daynum = -1;

					// Recupere les lettres correspondant au jour de l'event en majuscule
					$day = strtoupper( substr( date( 'D', strtotime( $this->event->event_start ) ), 0, 2 ) );

					// Le jour contient le numero et les lettres
					$byday = $daynum . $day;

					// Recupere le numero du mois de l'annee ou l'evenement demarre
					$monthnum = intval( date( 'm', strtotime( $this->event->event_start ) ) );

					// Ajoute le jour et le mois au table
					$recurrence['BYDAY'] = array( $daynum, 'DAY' => $day );
					$recurrence['BYMONTH'] = $monthnum;
			}
			// Genere l'ICS de la regle a partir du tableau de recurrence
			$this->vevent->setProperty( 'rrule',  $recurrence);

			// Ajoute l'exception a l'ICS
			if ($this->event->event_exceptions != '') {
				$exceptions = explode (',', $this->event->event_exceptions);
				// Recupere les valeurs du champ SQL et les split pour les parcourir en foreach
				foreach ($exceptions as $ex)
				{
					// DateTime pour comparer les dates
					$dateTimeStart = new DateTime($this->event->event_start);
					$dateTimeEnd = new DateTime($this->event->event_end);

					// Test si c'est un evenement sur une journee entiere
					if ($dateTimeStart->format('H:i:s') == '00:00:00'
							&& $dateTimeEnd->format('H:i:s') == '00:00:00') {
						$this->vevent->setProperty( 'EXDATE', array( $ex ), array('VALUE' => 'DATE') );
					}
					else {
						$this->vevent->setProperty( 'EXDATE', array( $ex.'T'.$dateTimeStart->format('His') ), array ('TZID' => $this->calendar->timezone ) );
					}
				}
			}

		}

	}

	/**
	 * Gestion des participants
	 */
	private function attendees() {
		if (isset($this->event->organizer_uid)) {
			$info = LDAPMelanie::GetInformations($this->event->organizer_uid);
			$this->vevent->setProperty('ORGANIZER', $info['mail'][0]);
		}

		if (!isset($this->event->organizer_attendees)) return;
		$attendees_array = unserialize($this->event->organizer_attendees);

		// Pour chacun des participants des données deserializées
		foreach ($attendees_array as $key => $value) {
			// Pour chacune des priopriétés de ces particpants
			foreach ($value as $key2 => $value2) {
				$val_attendee = array();
				// Gestion de la présence attendue
				if ($key2 == 'attendance') {
					$role = 'REQ-PARTICIPANT';
					switch (intval($value2)) {
						case ATTEND_ROLE_OPT_PARTICIPANT:
							$role = 'OPT-PARTICIPANT';
							break;
						case ATTEND_ROLE_NON_PARTICIPANT:
							$role = 'NON-PARTICIPANT';
							break;
						case ATTEND_ROLE_REQ_PARTICIPANT:
						default:
							$role = 'REQ-PARTICIPANT';
					}
				}
				// Gestion de la réponse du participant
				elseif ($key2 == 'response') {
					$partstat = 'NEEDS-ACTION';
					switch (intval($value2)) {
						case ATTEND_RESP_ACCEPTED:
							$partstat = 'ACCEPTED';
							break;
						case ATTEND_RESP_DECLINED:
							$partstat = 'DECLINED';
							break;
							//case ATTEND_RESP_IN_PROCESS:
							//  $partstat = 'IN-PROCESS';
							//  break;
						case ATTEND_RESP_TENTATIVE:
							$partstat = 'TENTATIVE';
							break;
						case ATTEND_RESP_NEED_ACTION:
						default:
							$partstat = 'NEEDS-ACTION';
					}
				}
				// Gestion du nom
				elseif ($key2 == 'name') {
					$name = $value2;
				}
			}
			// Propriétés associées au participant
			$properties_array = array('RSVP' => 'TRUE', 'PARTSTAT' => $partstat, 'ROLE' => $role, 'CN' => $name);
			$vevent->setProperty( 'attendee', $key, $properties_array );
		}
	}

	/**
	 * Nettoyage de la chaine de caractère UTF 8
	 * @param string $string
	 * @return string
	 */
	function cleanUTF8String ($string) {
		return preg_replace('/[\x01\x02\x03\x04\x13\x14]/', '', $string);
	}

}
