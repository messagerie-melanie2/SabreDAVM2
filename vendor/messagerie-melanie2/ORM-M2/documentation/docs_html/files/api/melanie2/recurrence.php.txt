<?php
/**
 * Ce fichier est développé pour la gestion de la librairie Mélanie2
 * Cette Librairie permet d'accèder aux données sans avoir à implémenter de couche SQL
 * Des objets génériques vont permettre d'accèder et de mettre à jour les données
 *
 * ORM M2 Copyright © 2017  PNE Annuaire et Messagerie/MEDDE
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
namespace LibMelanie\Api\Melanie2;

use LibMelanie\Objects\EventMelanie;
use LibMelanie\Lib\Melanie2Object;
use LibMelanie\Config\ConfigMelanie;
use LibMelanie\Config\MappingMelanie;
use LibMelanie\Exceptions;
use LibMelanie\Log\M2Log;

/**
 * Classe recurrence pour Melanie2
 * Doit être lié à un objet Event pour écrire directement dans les API
 *
 * Certains champs sont mappés directement
 *
 * @author PNE Messagerie/Apitech
 * @package Librairie Mélanie2
 * @subpackage API Mélanie2
 * @api
 *
 * @property string $enddate Date de fin de récurrence au format compatible DateTime
 * @property int $count Nombre d'occurrences
 * @property int $interval Interval de répétition de la récurrence
 * @property Recurrence::RECURTYPE_* $type Type de récurrence
 * @property Recurrence::RECURDAYS_* $days Jours de récurrence
 */
class Recurrence extends Melanie2Object {
	// Accès aux objets associés
	/**
	 * Evenement associé à l'objet
	 * @var EventMelanie
	 */
	 private $event;


	// RECURDAYS Fields
	const RECURDAYS_NODAY = ConfigMelanie::NODAY;
	const RECURDAYS_SUNDAY = ConfigMelanie::SUNDAY;
	const RECURDAYS_MONDAY = ConfigMelanie::MONDAY;
	const RECURDAYS_TUESDAY = ConfigMelanie::TUESDAY;
	const RECURDAYS_WEDNESDAY = ConfigMelanie::WEDNESDAY;
	const RECURDAYS_THURSDAY = ConfigMelanie::THURSDAY;
	const RECURDAYS_FRIDAY = ConfigMelanie::FRIDAY;
	const RECURDAYS_SATURDAY = ConfigMelanie::SATURDAY;

	// RECURTYPE Fields
	const RECURTYPE_NORECUR = ConfigMelanie::NORECUR;
	const RECURTYPE_DAILY = ConfigMelanie::DAILY;
	const RECURTYPE_WEEKLY = ConfigMelanie::WEEKLY;
	const RECURTYPE_MONTHLY = ConfigMelanie::MONTHLY;
	const RECURTYPE_MONTHLY_BYDAY = ConfigMelanie::MONTHLY_BYDAY;
	const RECURTYPE_YEARLY = ConfigMelanie::YEARLY;
	const RECURTYPE_YEARLY_BYDAY = ConfigMelanie::YEARLY_BYDAY;

	/**
	 * Constructeur de l'objet
	 *
	 * @param Event $event
	 */
	function __construct($event = null) {
	    // Défini la classe courante
	    $this->get_class = get_class($this);

		M2Log::Log(M2Log::LEVEL_DEBUG, $this->get_class."->__construct()");
		// Définition de l'évènement melanie2
		if (isset($event)) {
			$this->event = $event;
			$this->objectmelanie = $this->event;
		}
	}

	/*****************************************************
	 * METHOD MAPPING
	*/

	/*****************************************************
	 * MAPPING
	 */
	/**
	 * Mapping type field
	 * @param Recurrence::RECURTYPE $type
	 * @ignore
	 */
	protected function setMapType($type) {
		M2Log::Log(M2Log::LEVEL_DEBUG, $this->get_class."->setMapType($type)");
		if (!isset($this->objectmelanie)) throw new Exceptions\ObjectMelanieUndefinedException();
		$this->objectmelanie->type = MappingMelanie::$MapRecurtypeObjectMelanie[$type];
	}
	/**
	 * Mapping type field
	 * @ignore
	 */
	protected function getMapType() {
		M2Log::Log(M2Log::LEVEL_DEBUG, $this->get_class."->getMapRecurtype()");
		if (!isset($this->objectmelanie)) throw new Exceptions\ObjectMelanieUndefinedException();
		return MappingMelanie::$MapRecurtypeObjectMelanie[$this->objectmelanie->type];
	}

	/**
	 * Mapping days field
	 * @param array of Recurrence::RECURDAYS $days
	 * @ignore
	 */
	protected function setMapDays($days) {
		M2Log::Log(M2Log::LEVEL_DEBUG, $this->get_class."->setMapDays($days)");
		if (!isset($this->objectmelanie)) throw new Exceptions\ObjectMelanieUndefinedException();
		$this->objectmelanie->days = MappingMelanie::NODAY;
		if (is_array($days)) {
			foreach ($days as $day) {
				$this->objectmelanie->days += intval(MappingMelanie::$MapRecurdaysObjectMelanie[$day]);
			}
		} else {
			$this->objectmelanie->days += intval(MappingMelanie::$MapRecurdaysObjectMelanie[$days]);
		}
	}
	/**
	 * Mapping days field
	 * @ignore
	 */
	protected function getMapDays() {
		M2Log::Log(M2Log::LEVEL_DEBUG, $this->get_class."->getMapDays()");
		if (!isset($this->objectmelanie)) throw new Exceptions\ObjectMelanieUndefinedException();
		$days = array();
		foreach (MappingMelanie::$MapRecurdaysObjectMelanie as $day) {
			if (is_integer(MappingMelanie::$MapRecurdaysObjectMelanie[$day])
					&& MappingMelanie::$MapRecurdaysObjectMelanie[$day] & $this->objectmelanie->days)
				$days[] = $day;
		}
		return $days;
	}
}
